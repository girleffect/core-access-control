# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Invitationredirecturl(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, url: str=None, description: str=None, created_at: datetime=None, updated_at: datetime=None):  # noqa: E501
        """Invitationredirecturl - a model defined in Swagger

        :param id: The id of this Invitationredirecturl.  # noqa: E501
        :type id: int
        :param url: The url of this Invitationredirecturl.  # noqa: E501
        :type url: str
        :param description: The description of this Invitationredirecturl.  # noqa: E501
        :type description: str
        :param created_at: The created_at of this Invitationredirecturl.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Invitationredirecturl.  # noqa: E501
        :type updated_at: datetime
        """
        self.swagger_types = {
            'id': int,
            'url': str,
            'description': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'url': 'url',
            'description': 'description',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._url = url
        self._description = description
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'Invitationredirecturl':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The invitationredirecturl of this Invitationredirecturl.  # noqa: E501
        :rtype: Invitationredirecturl
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Invitationredirecturl.


        :return: The id of this Invitationredirecturl.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Invitationredirecturl.


        :param id: The id of this Invitationredirecturl.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def url(self) -> str:
        """Gets the url of this Invitationredirecturl.


        :return: The url of this Invitationredirecturl.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Invitationredirecturl.


        :param url: The url of this Invitationredirecturl.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def description(self) -> str:
        """Gets the description of this Invitationredirecturl.


        :return: The description of this Invitationredirecturl.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Invitationredirecturl.


        :param description: The description of this Invitationredirecturl.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Invitationredirecturl.


        :return: The created_at of this Invitationredirecturl.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Invitationredirecturl.


        :param created_at: The created_at of this Invitationredirecturl.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Invitationredirecturl.


        :return: The updated_at of this Invitationredirecturl.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Invitationredirecturl.


        :param updated_at: The updated_at of this Invitationredirecturl.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at
